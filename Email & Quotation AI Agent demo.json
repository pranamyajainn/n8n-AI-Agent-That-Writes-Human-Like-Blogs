{
  "name": "Email & Quotation AI Agent - Demo",
  "nodes": [
    {
      "parameters": {
        "webhookId": "demo-email-trigger",
        "httpMethod": "POST",
        "path": "demo-email",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "demo-email-trigger",
      "name": "Demo Email Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [240, 300]
    },
    {
      "parameters": {
        "jsCode": "const demoEmails = [\n  {\n    from: { address: 'customer1@acmecorp.com', name: 'John Smith' },\n    subject: 'Request for Industrial Pump Quotation',\n    text: 'Hi, I need a quotation for 5 units of centrifugal pumps for our new facility. Flow rate requirement: 500 GPM, Head: 150 ft. Please include installation services.',\n    attachments: [{ name: 'facility_layout.pdf', size: 2048 }],\n    messageId: 'demo-001',\n    date: new Date().toISOString()\n  },\n  {\n    from: { address: 'procurement@techsolutions.com', name: 'Sarah Johnson' },\n    subject: 'Product Catalog Request',\n    text: 'Could you please send me your latest product catalog and price list for industrial valves?',\n    attachments: [],\n    messageId: 'demo-002',\n    date: new Date().toISOString()\n  },\n  {\n    from: { address: 'support@manufacturing.com', name: 'Mike Wilson' },\n    subject: 'Technical Support Needed',\n    text: 'We are experiencing issues with our Model XYZ pump. It seems to be making unusual noise and vibration.',\n    attachments: [{ name: 'error_log.txt', size: 1024 }],\n    messageId: 'demo-003',\n    date: new Date().toISOString()\n  }\n];\n\nconst webhookData = $input.first().json;\nlet emailData;\n\nif (webhookData && webhookData.demo_type) {\n  const emailIndex = parseInt(webhookData.demo_type) || 0;\n  emailData = demoEmails[emailIndex] || demoEmails[0];\n} else {\n  emailData = demoEmails[Math.floor(Math.random() * demoEmails.length)];\n}\n\nreturn { json: emailData };"
      },
      "id": "demo-data-generator",
      "name": "Demo Data Generator",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "jsCode": "const email = $input.first().json;\nconst subject = email.subject.toLowerCase();\nconst text = email.text.toLowerCase();\n\nlet category = 'GENERAL_INQUIRY';\nlet confidence = 0.8;\nlet keywords = [];\n\nif (subject.includes('quotation') || subject.includes('quote') || text.includes('quotation') || text.includes('quote') || text.includes('price')) {\n  category = 'QUOTE_REQUEST';\n  confidence = 0.95;\n  keywords = ['pump', 'centrifugal', 'industrial', 'installation'];\n} else if (subject.includes('catalog') || subject.includes('datasheet') || subject.includes('brochure') || text.includes('catalog') || text.includes('price list')) {\n  category = 'DATASHEET_REQUEST';\n  confidence = 0.92;\n  keywords = ['industrial', 'valves', 'catalog', 'price list'];\n} else if (subject.includes('support') || subject.includes('issue') || text.includes('problem') || text.includes('error')) {\n  category = 'TECHNICAL_SUPPORT';\n  confidence = 0.88;\n  keywords = ['pump', 'model xyz', 'noise', 'vibration'];\n}\n\nconst aiResponse = {\n  message: {\n    content: `${category}:${confidence}\\nKeywords: ${keywords.join(', ')}`\n  }\n};\n\nreturn { json: aiResponse };"
      },
      "id": "ai-classifier-simulator",
      "name": "AI Email Classifier",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "jsCode": "const aiResponse = $input.all()[1].json.message.content;\nconst emailData = $input.all()[0].json;\n\nconst lines = aiResponse.split('\\n');\n\nlet category = 'GENERAL_INQUIRY';\nlet confidence = 0.5;\nlet keywords = [];\n\nfor (const line of lines) {\n  if (line.includes(':')) {\n    const parts = line.split(':');\n    const key = parts[0].trim();\n    const value = parts[1].trim();\n    \n    if (['QUOTE_REQUEST', 'DATASHEET_REQUEST', 'GENERAL_INQUIRY', 'TECHNICAL_SUPPORT'].includes(key)) {\n      category = key;\n      confidence = parseFloat(value) || 0.5;\n    } else if (key.toLowerCase() === 'keywords') {\n      keywords = value.split(',').map(k => k.trim()).filter(k => k.length > 0);\n    }\n  }\n}\n\nreturn {\n  json: {\n    ...emailData,\n    classification: {\n      category,\n      confidence,\n      keywords\n    }\n  }\n};"
      },
      "id": "parse-classification",
      "name": "Parse Classification",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "jsCode": "const email = $input.first().json;\nconst customerEmail = email.from.address;\n\nconst mockCrmData = {\n  'customer1@acmecorp.com': {\n    id: 'contact_001',\n    Full_Name: 'John Smith',\n    Email: 'customer1@acmecorp.com',\n    Account_Name: { id: 'account_001', name: 'ACME Corp' },\n    Owner: { id: 'user_001', name: 'Sales Rep 1', Email: 'sales1@yourcompany.com' },\n    Phone: '+1-555-0101',\n    Industry: 'Manufacturing'\n  },\n  'procurement@techsolutions.com': {\n    id: 'contact_002',\n    Full_Name: 'Sarah Johnson',\n    Email: 'procurement@techsolutions.com',\n    Account_Name: { id: 'account_002', name: 'Tech Solutions Ltd' },\n    Owner: { id: 'user_002', name: 'Sales Rep 2', Email: 'sales2@yourcompany.com' },\n    Phone: '+1-555-0102',\n    Industry: 'Technology'\n  },\n  'support@manufacturing.com': {\n    id: 'contact_003',\n    Full_Name: 'Mike Wilson',\n    Email: 'support@manufacturing.com',\n    Account_Name: { id: 'account_003', name: 'Manufacturing Co' },\n    Owner: { id: 'user_003', name: 'Support Engineer', Email: 'support@yourcompany.com' },\n    Phone: '+1-555-0103',\n    Industry: 'Manufacturing'\n  }\n};\n\nconst contactData = mockCrmData[customerEmail] || {\n  id: 'contact_new',\n  Full_Name: email.from.name || 'New Customer',\n  Email: customerEmail,\n  Account_Name: { id: 'account_new', name: 'New Account' },\n  Owner: { id: 'user_default', name: 'Default Rep', Email: 'sales@yourcompany.com' },\n  Phone: 'Unknown',\n  Industry: 'Unknown'\n};\n\nreturn { json: contactData };"
      },
      "id": "crm-lookup-simulator",
      "name": "CRM Contact Lookup",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "1",
              "leftValue": "={{ $json.classification.category }}",
              "rightValue": "DATASHEET_REQUEST",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "2",
              "leftValue": "={{ $json.classification.category }}",
              "rightValue": "QUOTE_REQUEST",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "3",
              "leftValue": "={{ $json.classification.category }}",
              "rightValue": "GENERAL_INQUIRY",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "or"
        },
        "fallbackOutput": 3
      },
      "id": "route-decision",
      "name": "Route Decision",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "jsCode": "const emailData = $input.first().json;\nconst keywords = emailData.classification.keywords || [];\n\nconst mockDocuments = {\n  'industrial': [\n    { name: 'Industrial_Pumps_Catalog_2024.pdf', url: '/docs/pumps_catalog.pdf', size: '15MB' },\n    { name: 'Industrial_Valves_Brochure.pdf', url: '/docs/valves_brochure.pdf', size: '8MB' }\n  ],\n  'valves': [\n    { name: 'Valve_Specifications.pdf', url: '/docs/valve_specs.pdf', size: '5MB' },\n    { name: 'Valve_Price_List_2024.pdf', url: '/docs/valve_prices.pdf', size: '2MB' }\n  ],\n  'pump': [\n    { name: 'Pump_Technical_Manual.pdf', url: '/docs/pump_manual.pdf', size: '12MB' },\n    { name: 'Centrifugal_Pumps_Datasheet.pdf', url: '/docs/centrifugal_specs.pdf', size: '6MB' }\n  ]\n};\n\nlet relevantDocs = [];\nfor (const keyword of keywords) {\n  if (mockDocuments[keyword.toLowerCase()]) {\n    relevantDocs = relevantDocs.concat(mockDocuments[keyword.toLowerCase()]);\n  }\n}\n\nif (relevantDocs.length === 0) {\n  relevantDocs = [\n    { name: 'General_Product_Catalog.pdf', url: '/docs/general_catalog.pdf', size: '20MB' },\n    { name: 'Company_Brochure.pdf', url: '/docs/company_brochure.pdf', size: '3MB' }\n  ];\n}\n\nreturn {\n  json: {\n    documents: relevantDocs,\n    total_documents: relevantDocs.length,\n    keywords_matched: keywords\n  }\n};"
      },
      "id": "document-service-simulator",
      "name": "Get Relevant Documents",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1560, 180]
    },
    {
      "parameters": {
        "jsCode": "const emailData = $input.first().json;\nconst emailText = emailData.text || '';\nconst keywords = emailData.classification.keywords || [];\n\nconst mockProducts = {\n  'pump': [\n    { id: 'P001', name: 'Centrifugal Pump Model CP-500', price: 2500, specs: '500 GPM, 150 ft head' },\n    { id: 'P002', name: 'Industrial Pump Model IP-750', price: 3200, specs: '750 GPM, 200 ft head' }\n  ],\n  'valve': [\n    { id: 'V001', name: 'Ball Valve 6 inch', price: 450, specs: '6 inch, 600 PSI' },\n    { id: 'V002', name: 'Gate Valve 8 inch', price: 680, specs: '8 inch, 800 PSI' }\n  ]\n};\n\nlet suggestedProducts = [];\nlet totalAmount = 0;\n\nfor (const keyword of keywords) {\n  if (mockProducts[keyword.toLowerCase()]) {\n    const products = mockProducts[keyword.toLowerCase()];\n    suggestedProducts = suggestedProducts.concat(\n      products.map(p => ({\n        ...p,\n        quantity: keyword === 'pump' ? 5 : 2\n      }))\n    );\n  }\n}\n\ntotalAmount = suggestedProducts.reduce((sum, product) => {\n  return sum + (product.price * product.quantity);\n}, 0);\n\nconst quoteRequirements = {\n  requirements: emailText.substring(0, 200) + '...',\n  suggested_products: suggestedProducts,\n  special_notes: 'Installation services requested. Facility layout provided.',\n  delivery_estimate: '2-3 weeks',\n  total_amount: totalAmount\n};\n\nconst aiResponse = {\n  message: {\n    content: JSON.stringify(quoteRequirements, null, 2)\n  }\n};\n\nreturn { json: aiResponse };"
      },
      "id": "quote-extractor-simulator",
      "name": "Extract Quote Requirements",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1560, 300]
    },
    {
      "parameters": {
        "jsCode": "const contactData = $input.first().json;\nconst ownerInfo = contactData.Owner || {\n  id: 'user_default',\n  name: 'Default Sales Rep',\n  Email: 'sales@yourcompany.com',\n  Phone: '+1-555-0100'\n};\n\nreturn { json: ownerInfo };"
      },
      "id": "owner-lookup-simulator",
      "name": "Get Assigned Owner",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1560, 420]
    },
    {
      "parameters": {
        "jsCode": "const emailData = $input.all()[0].json;\nconst documentsData = $input.all()[1].json;\n\nconst emailResponse = {\n  status: 'sent',\n  messageId: 'mock-' + Date.now(),\n  to: emailData.from.address,\n  subject: `Re: ${emailData.subject} - Requested Documents`,\n  attachments: documentsData.documents,\n  sentAt: new Date().toISOString(),\n  action_taken: 'DATASHEET_SENT'\n};\n\nreturn {\n  json: {\n    ...emailData,\n    email_response: emailResponse,\n    action_taken: 'DATASHEET_SENT'\n  }\n};"
      },
      "id": "datasheet-response-simulator",
      "name": "Send Datasheet Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1780, 180]
    },
    {
      "parameters": {
        "jsCode": "const aiResponse = $input.all()[1].json.message.content;\nconst emailData = $input.all()[0].json;\nconst contactData = $input.all()[2].json;\n\nlet quoteData;\ntry {\n  quoteData = JSON.parse(aiResponse);\n} catch (e) {\n  quoteData = {\n    requirements: aiResponse,\n    suggested_products: [],\n    special_notes: '',\n    delivery_estimate: '2-3 weeks',\n    total_amount: 0\n  };\n}\n\nconst quoteRecord = {\n  id: 'quote_' + Date.now(),\n  Deal_Name: `Quote - ${emailData.subject}`,\n  Contact_Name: contactData.id || null,\n  Account_Name: contactData.Account_Name?.id || null,\n  Amount: quoteData.total_amount || 0,\n  Stage: 'Qualification',\n  Description: `Auto-generated quote request\\n\\nRequirements: ${quoteData.requirements}\\n\\nSuggested Products: ${JSON.stringify(quoteData.suggested_products)}\\n\\nSpecial Notes: ${quoteData.special_notes}\\n\\nDelivery Estimate: ${quoteData.delivery_estimate}`,\n  Lead_Source: 'Email',\n  Closing_Date: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n  Created_Time: new Date().toISOString(),\n  Status: 'Draft'\n};\n\nreturn {\n  json: {\n    ...emailData,\n    quote_data: quoteData,\n    crm_record: quoteRecord\n  }\n};"
      },
      "id": "prepare-quote-data",
      "name": "Prepare Quote Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1780, 300]
    },
    {
      "parameters": {
        "jsCode": "const quoteData = $input.first().json;\nconst crmRecord = quoteData.crm_record;\n\nconst crmResponse = {\n  status: 'created',\n  id: crmRecord.id,\n  deal_name: crmRecord.Deal_Name,\n  amount: crmRecord.Amount,\n  stage: crmRecord.Stage,\n  created_time: crmRecord.Created_Time,\n  owner: 'Sales Team',\n  quote_url: `https://demo-crm.com/deals/${crmRecord.id}`,\n  action_taken: 'QUOTE_DRAFT_CREATED'\n};\n\nreturn {\n  json: {\n    ...quoteData,\n    crm_response: crmResponse,\n    action_taken: 'QUOTE_DRAFT_CREATED'\n  }\n};"
      },
      "id": "crm-quote-simulator",
      "name": "Create Quote Draft in CRM",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2000, 300]
    },
    {
      "parameters": {
        "jsCode": "const quoteData = $input.all()[0].json;\nconst ownerData = $input.all()[1].json;\n\nconst emailResponse = {\n  status: 'sent',\n  messageId: 'ack-' + Date.now(),\n  to: quoteData.from.address,\n  cc: ownerData.Email,\n  subject: `Re: ${quoteData.subject} - Quote Request Received`,\n  quote_reference: quoteData.crm_response.id,\n  sentAt: new Date().toISOString(),\n  action_taken: 'QUOTE_ACKNOWLEDGMENT_SENT'\n};\n\nreturn {\n  json: {\n    ...quoteData,\n    acknowledgment_email: emailResponse,\n    action_taken: 'QUOTE_ACKNOWLEDGMENT_SENT'\n  }\n};"
      },
      "id": "quote-acknowledgment-simulator",
      "name": "Send Quote Acknowledgment",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2220, 300]
    },
    {
      "parameters": {
        "jsCode": "const emailData = $input.all()[0].json;\nconst ownerData = $input.all()[1].json;\n\nconst forwardResponse = {\n  status: 'forwarded',\n  messageId: 'fwd-' + Date.now(),\n  to: ownerData.Email,\n  subject: `General Inquiry: ${emailData.subject}`,\n  forwarded_from: emailData.from.address,\n  classification: emailData.classification,\n  sentAt: new Date().toISOString(),\n  action_taken: 'FORWARDED_TO_OWNER'\n};\n\nreturn {\n  json: {\n    ...emailData,\n    forward_response: forwardResponse,\n    action_taken: 'FORWARDED_TO_OWNER'\n  }\n};"
      },
      "id": "forward-simulator",
      "name": "Forward to Assigned Person",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1780, 540]
    },
    {
      "parameters": {
        "webhookId": "whatsapp-webhook-demo",
        "httpMethod": "POST",
        "path": "whatsapp-demo",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "whatsapp-webhook-demo",
      "name": "WhatsApp Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [240, 600]
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first().json;\n\nconst demoWhatsAppMessages = [\n  {\n    entry: [{\n      changes: [{\n        value: {\n          messages: [{\n            from: '919876543210',\n            type: 'text',\n            text: { body: 'Hi, I need a quote for 3 industrial pumps for my factory. Can you help?' },\n            timestamp: Date.now()\n          }]\n        }\n      }]\n    }]\n  },\n  {\n    entry: [{\n      changes: [{\n        value: {\n          messages: [{\n            from: '919876543211',\n            type: 'text',\n            text: { body: 'Please send me your product catalog for valves' },\n            timestamp: Date.now()\n          }]\n        }\n      }]\n    }]\n  }\n];\n\nconst whatsappData = input.demo_whatsapp ? \n  demoWhatsAppMessages[0] : \n  (input.entry ? input : demoWhatsAppMessages[Math.floor(Math.random() * demoWhatsAppMessages.length)]);\n\nconst messageText = whatsappData.entry?.[0]?.changes?.[0]?.value?.messages?.[0]?.text?.body || '';\nconst messageType = whatsappData.entry?.[0]?.changes?.[0]?.value?.messages?.[0]?.type || 'text';\nconst fromNumber = whatsappData.entry?.[0]?.changes?.[0]?.value?.messages?.[0]?.from || '';\n\nconst emailLikeData = {\n  from: {\n    address: `${fromNumber}@whatsapp.com`,\n    name: `WhatsApp User ${fromNumber.slice(-4)}`\n  },\n  subject: 'WhatsApp Message',\n  text: messageText,\n  attachments: messageType !== 'text' ? [{ type: messageType }] : [],\n  source: 'whatsapp',\n  messageId: 'wa-' + Date.now(),\n  date: new Date().toISOString()\n};\n\nreturn { json: emailLikeData };"
      },
      "id": "whatsapp-processor",
      "name": "Process WhatsApp Message",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 600]
    },
    {
      "parameters": {
        "jsCode": "const inputData = $input.first().json;\n\nconst activityLog = {\n  timestamp: new Date().toISOString(),\n  event_type: 'EMAIL_PROCESSED',\n  classification: inputData.classification?.category || 'UNKNOWN',\n  confidence: inputData.classification?.confidence || 0,\n  source: inputData.source || 'email',\n  customer: inputData.from?.address || 'unknown',\n  action_taken: inputData.action_taken || 'PROCESSED',\n  processing_time: Math.random() * 1000 + 500,\n  keywords: inputData.classification?.keywords || [],\n  success: true\n};\n\nconst slackMessage = {\n  text: `🤖 Email Agent Activity\\n\\n` +\n        `📧 New ${inputData.classification?.category || 'EMAIL'} processed\\n` +\n        `👤 From: ${inputData.from?.address || 'Unknown'}\\n` +\n        `📋 Subject: ${inputData.subject || 'No Subject'}\\n` +\n        `🎯 Confidence: ${Math.round((inputData.classification?.confidence || 0) * 100)}%\\n` +\n        `⚡ Action: ${inputData.action_taken || 'Processed'}\\n` +\n        `⏱️ Processing Time: ${Math.round(activityLog.processing_time)}ms\\n` +\n        `🔍 Keywords: ${(inputData.classification?.keywords || []).join(', ') || 'None'}`,\n  channel: '#ai-agent-logs',\n  username: 'Email Agent',\n  icon_emoji: ':robot_face:'\n};\n\nreturn {\n  json: {\n    ...inputData,\n    activity_log: activityLog,\n    slack_notification: slackMessage,\n    logged_at: new Date().toISOString()\n  }\n};"
      },
      "id": "activity-logger",
      "name": "Log Activity",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2400, 400]
    }
  ],
  "connections": {
    "Demo Email Trigger": {
      "main": [
        [
          {
            "node": "Demo Data Generator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Demo Data Generator": {
      "main": [
        [
          {
            "node": "AI Email Classifier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Email Classifier": {
      "main": [
        [
          {
            "node": "Parse Classification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Classification": {
      "main": [
        [
          {
            "node": "CRM Contact Lookup",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CRM Contact Lookup": {
      "main": [
        [
          {
            "node": "Route Decision",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Decision": {
      "main": [
        [
          {
            "node": "Get Relevant Documents",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract Quote Requirements",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Assigned Owner",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Assigned Owner",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Relevant Documents": {
      "main": [
        [
          {
            "node": "Send Datasheet Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Quote Requirements": {
      "main": [
        [
          {
            "node": "Prepare Quote Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Assigned Owner": {
      "main": [
        [
          {
            "node": "Forward to Assigned Person",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Datasheet Response": {
      "main": [
        [
          {
            "node": "Log Activity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Quote Data": {
      "main": [
        [
          {
            "node": "Create Quote Draft in CRM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Quote Draft in CRM": {
      "main": [
        [
          {
            "node": "Send Quote Acknowledgment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Quote Acknowledgment": {
      "main": [
        [
          {
            "node": "Log Activity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Forward to Assigned Person": {
      "main": [
        [
          {
            "node": "Log Activity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WhatsApp Webhook": {
      "main": [
        [
          {
            "node": "Process WhatsApp Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process WhatsApp Message": {
      "main": [
        [
          {
            "node": "AI Email Classifier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "1",
      "name": "AI Agent Demo"
    },
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "2",
      "name": "Email Automation Demo"
    }
  ],
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "demo-instance-id"
  },
  "id": "email-quotation-demo-workflow",
  "versionId": "demo-v1.0"
}
